library(readxl)
data_peace <- read_excel("~/projects/ml_challenges/data_peace.xls")
View(data_peace)
table(data_peace$ended)
names(data_peace)
data <- data_peace[, c("ended","cease", "Intarmy", "DDR", "Withd")]
glm(ended ~ cease + Intarmy + DDR + Withd, data = data)
summary(glm(ended ~ cease + Intarmy + DDR + Withd, data = data))
names(data_peace)
data <- data_peace[, c("ended","cease", "Intarmy", "DDR", "Withd",
"Mil_prov", "pp", "Intgov", "Intciv","Elections",
"Interrim", "Natalks", "Shagov", "Pol_prov", "Aut",
"Fed", "Ind" ,"Ref", "Shaloc")]
summary(glm(ended ~ , data = data))
summary(glm(ended ~ ., data = data))
names(data_peace)
data <- data_peace[, c("ended","cease", "Intarmy", "DDR", "Withd",
"Mil_prov", "pp", "Intgov", "Intciv","Elections",
"Interrim", "Natalks", "Shagov", "Pol_prov", "Aut",
"Fed", "Ind" ,"Ref", "Shaloc",
"Regdev", "Cul", "Demarcation","Locgov",
"Terr_prov",  "Amn", "pris", "Recon",
"Return", "Justice_prov")]
summary(glm(ended ~ ., data = data))
str(data)
library(caret)
library(ggplot2)
Index <- createDataPartition(data$made_donation, p=0.80, list=FALSE)
Index <- createDataPartition(data$ended, p=0.80, list=FALSE)
data_train <- data[Index,]
data_test <- data[-Index,]
nrow(data_train)
ncol(data_train)
summary(data_train)
ggplot(data, aes(x=DDR,
y=Aut))+
geom_point(aes(col =as.factor(ended)))
ggplot(data, aes(x=DDR,
y=Aut))+
geom_bar(aes(col =as.factor(ended)))
ggplot(data, aes(x=DDR,
y=Aut))+
geom_histogram(aes(col =as.factor(ended)))
fit.glm <- train(ended ~ .,
data=data_train, method="glm", metric="Accuracy")
fit.glm <- train(as.factor(ended) ~ .,
data=data_train, method="glm", metric="Accuracy")
warnings()
summary(fit.glm)
predict(fit.glm)
predict(fit.glm, newdata = data_test) == data_test$ended
sum(predict(fit.glm, newdata = data_test) == data_test$ended)/nrow(data_test)
predict(fit.glm) == data_train$ended
sum(predict(fit.glm) == data_train$ended) / nrow(data_train)
Index <- createDataPartition(data$ended, p=0.90, list=FALSE)
data_train <- data[Index,]
data_test <- data[-Index,]
fit.glm <- train(as.factor(ended) ~ .,
data=data_train, method="glm", metric="Accuracy")
summary(fit.glm)
sum(predict(fit.glm) == data_train$ended) / nrow(data_train)
sum(predict(fit.glm, newdata = data_test) == data_test$ended)/nrow(data_test)
94.22 + 51.2 + 137
exp(3.89)
?train
sum(predict(fit.glm, newdata = data_test) == data_test$ended)/nrow(data_test)
sum(predict(fit.glm) == data_train$ended) / nrow(data_train)
fit.glm <- train(as.factor(ended) ~ .,
data=data_train, method="treebag", metric="Accuracy")
summary(fit.glm)
sum(predict(fit.glm) == data_train$ended) / nrow(data_train)
sum(predict(fit.glm, newdata = data_test) == data_test$ended)/nrow(data_test)
library(caret)
fit.glm <- train(as.factor(ended) ~ .,
data=data_train, method="treebag", metric="Accuracy")
summary(fit.glm)
sum(predict(fit.glm) == data_train$ended) / nrow(data_train)
sum(predict(fit.glm, newdata = data_test) == data_test$ended)/nrow(data_test)
data_blood <- read_excel("~/projects/ml_challenges/data_blood.xls")
library(readr)
library(caret)
library(ggplot2)
data_blood <- read_excel("~/projects/ml_challenges/data_blood.xls")
library(readxl)
data_blood <- read_excel("~/projects/ml_challenges/data_blood.xls")
data_blood <- read_excel("~/projects/ml_challenges/data_blood.csv")
data_blood <- read_csv("~/projects/ml_challenges/data_blood.csv")
names(data) <- c("ID", "months_since_last", "number_donations",
"total_volume", "months_since_first", "made_donation")
data[2:5] <- sapply(data[2:5], as.numeric)
data$made_donation <- as.factor(data$made_donation)
data$ID <- NULL
View(data)
data_blood <- read_csv("~/projects/ml_challenges/data_blood.csv")
View(data_blood)
names(data) <- c("ID", "months_since_last", "number_donations",
"total_volume", "months_since_first", "made_donation")
View(data_blood)
names(data_blood) <- c("ID", "months_since_last", "number_donations",
"total_volume", "months_since_first", "made_donation")
data[2:5] <- sapply(data[2:5], as.numeric)
data_blood[2:5] <- sapply(data_blood[2:5], as.numeric)
data_blood$made_donation <- as.factor(data_blood$made_donation)
data_blood$ID <- NULL
data_blood <- read_csv("~/projects/ml_challenges/data_blood.csv")
names(data_blood) <- c("ID", "months_since_last", "number_donations",
"total_volume", "months_since_first", "made_donation")
data_blood[2:5] <- sapply(data_blood[2:5], as.numeric)
data_blood$made_donation <- as.factor(data_blood$made_donation)
data_blood$ID <- NULL
View(data_blood)
names(data_blood)
featurePlot(x=data_blood[,1:4], y=data_blood[,5], plot="pairs", auto.key=list(columns=3))
?featurePlot
featurePlot(x=data_blood[,1:4],
y=data_blood[,5],
plot="pairs"
#auto.key=list(columns=3)
)
Index <- createDataPartition(data_blood$made_donation, p=0.80, list=FALSE)
data_train <- data_blood[Index,]
data_test <- data_blood[-Index,]
fit.glm <- train(made_donation ~ months_since_last + number_donations + months_since_first,
data=data_train, method="glm", metric="Accuracy")
summary(fit.glm)
predict(fit.glm)
predict(fit.glm, newdata = data_test) == data_test$made_donation
sum(predict(fit.glm, newdata = data_test) == data_test$made_donation)/nrow(data_test)
summary(fit.glm)
# check accuracy on test data
sum(predict(fit.glm, newdata = data_test) == data_test$ended)/nrow(data_test)
sum(predict(fit.glm) == data_train$ended) / nrow(data_train)
60*80
# explore the data
dim(data_train)
nrow(data_peace)
peace_split <- createDataPartition(data_peace$ended, p=0.85, list=FALSE)
library(caret)
peace_split <- createDataPartition(data_peace$ended, p=0.85, list=FALSE)
peace_train <- data[peace_split,]
peace_test <- data[-Index,]
peace_train <- data_peace[peace_split,]
peace_test <- data_peace[-peace_split,]
names(peace_test)
data_peace <- read_excel("~/projects/ml_challenges/data_peace.xls")
library(readxl)
data_peace <- read_excel("~/projects/ml_challenges/data_peace.xls")
# subset data
data_peace <- data_peace[, c("ended","cease", "Intarmy", "DDR", "Withd",
"Mil_prov", "pp", "Intgov", "Intciv","Elections",
"Interrim", "Natalks", "Shagov", "Pol_prov", "Aut",
"Fed", "Ind" ,"Ref", "Shaloc",
"Regdev", "Cul", "Demarcation","Locgov",
"Terr_prov",  "Amn", "pris", "Recon",
"Return", "Justice_prov")]
peace_split <- createDataPartition(data_peace$ended, p=0.85, list=FALSE)
peace_train <- data_peace[peace_split,]
peace_test <- data_peace[-peace_split,]
names(peace_test)
save(peace_train, file = "peace_train.csv")
write.csv(peace_train, file = "peace_train.csv")
names(peace_train)
data_peace$id <- 1:nrow(data_peace)
peace_split <- createDataPartition(data_peace$ended, p=0.85, list=FALSE)
peace_train <- data_peace[peace_split,]
peace_test <- data_peace[-peace_split,]
write.csv(peace_train, file = "peace_train.csv")
# test file
names(peace_test)
# test file
peace_eval <- peace_test[,c("id", "ended")]
names(peace_eval)
str(peace_eval)
peace_eval$id <- as.character(peace_eval$id)
write.csv(peace_eval, file = "peace_eval.csv")
str(peace_eval)
peace_eval$Id <- as.character(peace_eval$id)
peace_eval$id <- NULL
write.csv(peace_eval, file = "peace_eval.csv")
names(peace_test)
peace_eval_feat <- peace_test[,-c("ended")]
peace_eval_feat <- peace_test[,-1]
paste0(1:nrow(data_peace))
data_peace <- read_excel("~/projects/ml_challenges/data_peace.xls")
names(data_peace)
# subset data
data_peace <- data_peace[, c("ended","cease", "Intarmy", "DDR", "Withd",
"Mil_prov", "pp", "Intgov", "Intciv","Elections",
"Interrim", "Natalks", "Shagov", "Pol_prov", "Aut",
"Fed", "Ind" ,"Ref", "Shaloc",
"Regdev", "Cul", "Demarcation","Locgov",
"Terr_prov",  "Amn", "pris", "Recon",
"Return", "Justice_prov")]
#### Create datasets for ML challenges
data_peace$Id <- paste0(1:nrow(data_peace))
peace_split <- createDataPartition(data_peace$ended, p=0.85, list=FALSE)
peace_train <- data_peace[peace_split,]
peace_test <- data_peace[-peace_split,]
# training file
write.csv(peace_train, file = "peace_train.csv")
write.csv(peace_train, file = "peace_train.csv")
# test file with solutions
peace_eval <- peace_test[,c("id", "ended")]
write.csv(peace_eval, file = "peace_eval.csv")
# test file with solutions
peace_eval <- peace_test[,c("Id", "ended")]
write.csv(peace_eval, file = "peace_eval.csv")
# test file with features
peace_eval_feat <- peace_test[,-1]
write.csv(peace_eval_feat, file = "peace_eval_features.csv")
Index <- createDataPartition(peace_train$ended, p=0.90, list=FALSE)
data_train <- peace_train[Index,]
data_test <- peace_train[-Index,]
# explore the data
dim(data_train)
fit.glm <- train(as.factor(ended) ~ .,
data=data_train, method="treebag", metric="Accuracy")
summary(fit.glm)
# check accuracy on test data
sum(predict(fit.glm, newdata = data_test) == data_test$ended)/nrow(data_test)
data_test <- peace_train[-Index,]
data_train
names(data_train)
peace_train[Index,-"Id"]
dim(peace_train)
Index <- createDataPartition(peace_train$ended, p=0.90, list=FALSE)
data_train <- peace_train[Index,-30] # delete ID var
data_test <- peace_train[-Index,-30] # delete ID var
# train the model
fit.glm <- train(as.factor(ended) ~ .,
data=data_train, method="glm", metric="Accuracy")
warnings()
?train
fit.glm <- train(as.factor(ended) ~ .,
data=data_train, method="glmboost", metric="Accuracy")
fit.glm <- train(as.factor(ended) ~ .,
data=data_train, method="rpart", metric="Accuracy")
summary(fit.glm)
sum(predict(fit.glm) == data_train$ended) / nrow(data_train)
# check accuracy on test data
sum(predict(fit.glm, newdata = data_test) == data_test$ended)/nrow(data_test)
names(peace_eval_feat)
predict(fit.glm, newdata = peace_eval_feat[,1:28])
?predict
predict(fit.glm, newdata = peace_eval_feat[,1:28], type = "prob")
fit.glm <- train(as.factor(ended) ~ .,
data=data_train, method="glm", metric="Accuracy")
summary(fit.glm)
sum(predict(fit.glm) == data_train$ended) / nrow(data_train)
# check accuracy on test data
sum(predict(fit.glm, newdata = data_test) == data_test$ended)/nrow(data_test)
# Predict test submission
names(peace_eval_feat)
predict(fit.glm, newdata = peace_eval_feat[,1:28], type = "prob")
predict(fit.glm, newdata = peace_eval_feat[,1:28], type = "prob")[2]
predicted_probabilities <- predict(fit.glm, newdata = peace_eval_feat[,1:28], type = "prob")[2]
test_submission <- cbind(peace_eval_feat$Id,
predicted_probabilities)
test_submission
str(test_submission)
test_submission <- cbind(as.character(peace_eval_feat$Id),
predicted_probabilities)
str(test_submission)
test_submission <- cbind(as.vector(as.character(peace_eval_feat$Id)),
predicted_probabilities)
str(test_submission)
test_submission <- as.data.frame(cbind(peace_eval_feat$Id,
predicted_probabilities))
str(test_submission)
names(test_submission) <- c("Id", "prob")
write.csv(test_submission, file = "test_submission.csv")
names(peace_data)
names(data_peace)
?write.csv
write.csv(peace_eval, file = "peace_eval.csv", row.names = F)
write.csv(peace_eval_feat, file = "peace_eval_features.csv", row.names = F)
write.csv(test_submission, file = "test_submission.csv",row.names = F)
library(readr)
library(caret)
library(ggplot2)
library(readxl)
# Load and clean the data
data_blood <- read_csv("~/projects/ml_challenges/data_blood.csv")
names(data_blood) <- c("ID", "months_since_last", "number_donations",
"total_volume", "months_since_first", "made_donation")
names(data_blood)
data_blood$ID
data_blood$ID <- as.character(data_blood$ID)
blood_split <- createDataPartition(data_blood$made_donation, p=0.85, list=FALSE)
blood_train <- data_blood[blood_split,]
blood_test <- data_blood[-blood_split,]
# training file
write.csv(blood_train, file = "peace_train.csv")
# training file
write.csv(blood_train, file = "blood_train.csv")
# training file
write.csv(peace_train, file = "peace_train.csv")
names(blood_test)
# test file with solutions
blood_eval <- blood_test[,c("ID", "made_donation")]
write.csv(peace_eval, file = "blood_solution.csv", row.names = F)
blood_eval
View(blood_eval)
names(blood_test)
# test file with features
blood_eval_feat <- blood_test[,-6]
write.csv(blood_eval_feat, file = "blood_test.csv", row.names = F)
Index <- createDataPartition(blood_train$made_donation, p=0.80, list=FALSE)
data_train <- blood_train[Index,]
data_test <- blood_train[-Index,]
?train
fit.glm <- train(made_donation ~ months_since_last + number_donations + months_since_first,
data=data_train, method="glm", metric="Accuracy")
fit.glm <- train(made_donation ~ months_since_last + number_donations + months_since_first,
data=data_train, method="logreg", metric="Accuracy")
fit.glm <- train(made_donation ~ months_since_last + number_donations + months_since_first,
data=data_train, method="logreg", metric="Accuracy")
fit.glm <- train(made_donation ~ months_since_last + number_donations + months_since_first,
data=data_train, method="logreg", metric="Accuracy")
fit.glm <- train(as.factor(made_donation) ~ months_since_last + number_donations + months_since_first,
data=data_train, method="logreg", metric="Accuracy")
head(data_train)
fit.glm <- train(made_donation ~ months_since_last + number_donations + months_since_first,
data=data_train, method="glm", metric="Accuracy")
fit.glm <- train(made_donation ~ months_since_last + number_donations + months_since_first,
data=data_train, method="glm") # , metric="Accuracy"
str(blood_data)
str(blood_train)
fit.glm <- train(made_donation ~ months_since_last + number_donations + months_since_first,
data=as.data.frame(data_train), method="glm") # , metric="Accuracy"
fit.glm <- train(as.factor(as.character(made_donation)) ~ months_since_last + number_donations + months_since_first,
data=data_train, method="glm") # , metric="Accuracy"
summary(fit.glm)
predict(fit.glm)
# check accuracy on test data
predict(fit.glm, newdata = data_test) == data_test$made_donation
sum(predict(fit.glm, newdata = data_test) == data_test$made_donation)/nrow(data_test)
fit.glm <- train(as.factor(as.character(made_donation)) ~ months_since_last + number_donations + months_since_first,
data=data_train, method="glm") # , metric="Accuracy"
summary(fit.glm)
# check accuracy on test data
predict(fit.glm, newdata = data_test) == data_test$made_donation
sum(predict(fit.glm, newdata = data_test) == data_test$made_donation)/nrow(data_test)
sum(predict(fit.glm, newdata = blood_eval_feat) == blood_solution$made_donation)/nrow(blood_solution)
sum(predict(fit.glm, newdata = blood_eval_feat) == blood_eval$made_donation)/nrow(blood_eval)
predict(fit.glm, newdata = blood_eval_feat)
predict(fit.glm, newdata = blood_eval_feat) == blood_eval$made_donation
names(blood_eval)
names(blood_eval_feat)
predict(fit.glm, newdata = blood_eval_feat[,2:5], type = "prob")
predict(fit.glm, newdata = blood_eval_feat, type = "prob")
predicted_probabilities <- predict(fit.glm, newdata = blood_eval_feat[,2:5], type = "prob")[2]
test_submission <- as.data.frame(cbind(blood_eval_feat$ID, predicted_probabilities))
names(test_submission) <- c("ID", "prob")
test_submission
write.csv(test_submission, file = "blood_test_submission.csv",row.names = F)
names(test_submission)
names(blood_solution)
names(blood_eval)
write.csv(blood_eval, file = "blood_solution.csv", row.names = F)
